@startuml
'https://plantuml.com/class-diagram
class UI{
+ FontSize
+ Color
+ clear()
+ PrintMessage(): void
+ PrintQuestion(): void
+ PrintGameBoard(): void
+ PrintStartMenu(): void
+ PrintMultipleChoice(Title: String, List<String>): int
+ ReadString(): string
+ ReadInt(): int
+ ReadBoolean(): bool
}
class GameManager{
- Player1: Player
- Player2: Player
- Board: GameBoard 
+ StartGame(): void
- PlayerInit(): void
- ArmyInit(): void
- GameBoardInit(): void
- UpdateGameBoard(): void
- Attack(Player1, Player2): void
- Turn(): void
- EndGame(): void
- SaveHighscore(): void
- Battlelog(): void
}
class GameBoard{
+ Height: int
+ Width: int
- Board: List<List<char>> // Board[width][height]
}


class Army {
- combinedHealingPower
- Units: List<AbstractUnit>
+ AddUnit(AbstractUnit): void
+ AttackedBy(AbstractUnit): void
+ HealingTurn(): void
+ Update(): void
- ClearDead(): void
}
class Player{
+ Name: String
+ Gold: int
+ Army: Army
+ getNextUnit()
+ AttackedBy(AbstractUnit)
}

abstract class AbstractUnit{
+ Weapon: AbstractWeapon
+ Cost: int
+ Health: int
+ MaxHealth: int
+ Damage: int
+ Healing: int
+ Armor: int
+ Reach: int
+ Heal(int): void
+ LifeSteal: int
+ isAlive(): bool
+ TakeDamage(int Damage): int
}
class DPSUnit
class TankUnit
class HealerUnit
abstract class UnitDecorator{
- Original: AbstractUnit
}
class SwordDecorator
class ShieldDecorator

abstract class AbstractWeapon{
+ Cost: int
+ Damage: int
+ Reach: int
+ LifeSteal: int
}

abstract class AbstractWeaponDecorator
class ReachDecorator
class SharpDecorator
class LifeStealDecorator

abstract class AbstractShield
class KiteShield

abstract class AbstractShieldDecorator

class Sword
class Mace
class spear

AbstractShield <-- AbstractShieldDecorator
AbstractShield <-- KiteShield

AbstractWeapon <-- AbstractWeaponDecorator
AbstractWeapon <-- Sword
AbstractWeapon <-- Mace
AbstractWeapon <-- spear

AbstractWeaponDecorator <-- ReachDecorator
AbstractWeaponDecorator <-- SharpDecorator
AbstractWeaponDecorator <-- LifeStealDecorator

UI -- GameManager
GameManager o- Player
GameManager o-- GameBoard
Player - Army : has a Army
Army - AbstractUnit : has many units
AbstractWeapon --o AbstractUnit
AbstractShield ---o AbstractUnit
AbstractUnit <-- DPSUnit
AbstractUnit <-- TankUnit
AbstractUnit <-- HealerUnit
AbstractUnit <-- UnitDecorator
UnitDecorator <-- ShieldDecorator
UnitDecorator <-- SwordDecorator



@enduml